
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// universal Rating Model 
model UserRating {
  id        Int      @id @default(autoincrement())
  uuid      String   @unique @default(cuid())
  raterId   Int
  rater     User     @relation("GivenRatings", fields: [raterId], references: [id]) // User who gave the rating
  ratedId   Int
  rated     User     @relation("ReceivedRatings", fields: [ratedId], references: [id]) // User who received the rating
  matchId   Int      @unique // A rating is strictly specific to one match
  match     Match    @relation(fields: [matchId], references: [id])
  rating    Int      // Rating value, e.g., 1-5
  review    String?  // Optional text review
  createdAt DateTime @default(now())

  @@unique([raterId, matchId]) // A user can only rate another user once per match
  @@index([ratedId]) // Index for retrieving all ratings for a user
  @@index([matchId]) // Index for linking to specific matches
}

// User model
model User {
  id            Int       @id @default(autoincrement())
  uuid          String?    @unique @default(cuid())
  email         String    @unique
  passwordHash  String?
  name String?
  countryOfOrigin  String?
  countryOfResidence String?
  isStudent  Boolean?  @default(true)
  phoneNumber   String?
  averageRating     Decimal?   @db.Decimal(3,2) // Average rating as a decimal 
  giventRatings     UserRating[]  @relation("GivenRatings")
  receivedRatings   UserRating[]  @relation("ReceivedRatings")
  agreeTerms Boolean?    @default(true)
  kycStatus     KycStatus? @default(PENDING) // Enum for KYC verification
  isVerified    Boolean?   @default(false)
  createdAt     DateTime?  @default(now())
  updatedAt     DateTime?  @updatedAt
  lastLogin     DateTime?
  role  UserRole @default(USER)
  profilePicture  String?
  emailVerified   Boolean   @default(false)
  isSuspended     Boolean   @default(false)

  // -----   Referal &  Early Believer fields

  referralCode    String?    @unique  @default(cuid())
  referredById    Int?     // ID of the user who  referred this user
  referredBy     User?   @relation("UserReferrals",fields: [referredById],references: [id])
  referredUsers     User[]    @relation("UserReferrals")  // List of users this user referred 
  referredUserCount   Int?    @default(0)
  isEarlyBeliever     Boolean?     @default(false)  // badge/status for Early adopters

  // Relationships
  listings      ExchangeListing[] // User can create multiple listings
  initiatedMatches Match[]          @relation("InitiatedMatches") // User initiates matches
  receivedMatches  Match[]         @relation("Receiver")  // User receives match requests
  sentMessages  Message[]        @relation("Sender")    // User sends messages
  receivedMessages Message[]       @relation("Receiver")  // User receives messages
 // sentTransactions Transaction[]   @relation("Sender")    // User is sender in transactions
  //receivedTransactions Transaction[] @relation("Receiver")  // User is receiver in transactions
  passwordResetTokens   PasswordResetToken[] // Auser can have many password reset token

  @@index([countryOfResidence])
  @@index([countryOfOrigin])
  @@index([email])
  @@index([referralCode])
  @@index(referredById)
}


// Enum for user roles 
enum UserRole {
  USER
  ADMIN
  MODERATOR
  KYC_AGENT
  AGENT
}
// Enum for KYC status
enum KycStatus {
  PENDING
  VERIFIED
  REJECTED
}

// Exchange Listing model
model ExchangeListing {
  id              Int        @id @default(autoincrement())
  uuid            String     @unique @default(cuid())
  userId          Int
  user            User       @relation(fields: [userId], references: [id])
  currencyFrom    String     // e.g., "USD"
  currencyTo      String     // e.g., "EUR"
  amountFrom      Float      // Amount of currencyFrom
  amountTo        Float      // Amount of currencyTo
  type            ListingType // BUY or SELL
  status          ListingStatus @default(ACTIVE) // ACTIVE, FULFILLED, CANCELED
  paymentMethod   String     // e.g., "Bank Transfer", "Mobile Money"
  location        String?    // Optional: authenticated user's country of residence
  description     String?    // Optional: additional details
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt
  expiresAt       DateTime   // when the listing automatically expires
  

  // Relationships
  initiatedMatches Match[]  @relation("InitiatorMatchListings")// A listing can have multiple matches
  matchedByMatches Match[]  @relation("MatchedListings")

  @@index([userId])
  @@index([amountFrom])
  @@index([type])
  @@index([status])
  @@index([createdAt])
  @@index([expiresAt])  // Important for querying active/expired listings
}

// Enum for Listing Type (BUY/SELL)
enum ListingType {
  BUY
  SELL
}

// Enum for Listing Status
enum ListingStatus {
  ACTIVE            // Visible and available for matching
  COMPLETED         // Exchange successfully finished
  CANCELED          // Listing was canceled by user
  PENDING           // For internal use, if a match is pending acceptance
  EXPIRED           // Listing passed its expiresAt date
  DISPUTE           //  Listing is under investigation or fraud
}


model Match {
  id                Int           @id @default(autoincrement())
  uuid              String        @unique @default(cuid())

 // the listing created by the initiator
  initiatorListingId         Int
  initiatorListing           ExchangeListing @relation("InitiatorMatchListings",fields: [initiatorListingId], references: [id])

   // The user who initiated the match proposal
  initiatorId   Int           // User who initiated the match (expressed interest)
  initiator         User          @relation("InitiatedMatches", fields: [initiatorId], references: [id])

  //  The listing that the initiator proposed to match with (owned by  the other user)
  matchedListingId    Int
  matchedListing      ExchangeListing    @relation("MatchedListings", fields:[matchedListingId], references:[id])


  receiverUserId    Int?           // User who owns the listing
  receiver          User?          @relation("Receiver", fields: [receiverUserId], references: [id])


  // Current status of the match 
  status            MatchStatus   @default(PENDING) // PENDING, ACCEPTED, REJECTED, CANCELED


  amount            Float?        // Matched amount (if partial)


  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt

  // Relationships
  messages  Message[]     // Messages related to this match
  //transaction Transaction[] // A match can lead to a transaction

  ratings     UserRating[]

  // Optional: for multi-party confirmation of completion (e.g., both sides click "confirm")
  // we might add a confirmation field or separate completion table later 
  // For MVP, we can assume one party marking completed is enough to transition to COMPLETED,
  // with DISPUTED status handling discrepancies

  initiatorConfirmedCompletion  Boolean @default(false)
  matchedConfirmedCompletion    Boolean @default(false)

  @@index([initiatorId])
  @@index([initiatorListingId])
  @@index([matchedListingId])
  @@index([status])
}

// Enum for Match Status
enum MatchStatus {
  PENDING    // Proposed by one user, awaiting acceptance from the other
  ACCEPTED   // Both parties agree, in-chat communication enabled
  COMPLETED  // Exhange successfully finished and confirmed by both parties  
  REJECTED   // A pending match proposal was explicitly rejected
  CANCELED   // Match canceled by one or both parties before completion
  DISPUTED  // Match is under active dispute or investigation

}

// Transaction model (after a match is accepted and funds are exchanged)
//model Transaction {
//  id               Int                @id @default(autoincrement())
//  uuid             String             @unique @default(cuid())
//  matchId          Int                @unique // One-to-one with Match
//  match            Match              @relation(fields: [matchId], references: [id])
//  senderUserId     Int
//  sender           User               @relation("Sender", fields: [senderUserId], references: [id])
//  receiverUserId   Int
//  receiver         User               @relation("Receiver", fields: [receiverUserId], references: [id])
//  amount           Float
//  currency         String
//  status           TransactionStatus  @default(INITIATED) // INITIATED, SENT_BY_SENDER, RECEIVED_BY_RECEIVER, COMPLETED, DISPUTED, CANCELED
//  proofOfPayment   String?            // Link to proof of payment (e.g., S3 URL)
//  createdAt        DateTime           @default(now())
//  updatedAt        DateTime           @updatedAt
//}

// Enum for Transaction Status
enum TransactionStatus {
  INITIATED
  SENT_BY_SENDER
  RECEIVED_BY_RECEIVER
  COMPLETED
  DISPUTED
  CANCELED
}

// Message model (for in-app chat)
model Message {
  id          Int      @id @default(autoincrement())
  uuid        String   @unique @default(cuid())
  matchId     Int
  match       Match    @relation(fields: [matchId], references: [id])
  senderId    Int
  sender      User     @relation("Sender", fields: [senderId], references: [id])
  receiverId  Int
  receiver    User     @relation("Receiver", fields: [receiverId], references: [id])
  content     String
  createdAt   DateTime @default(now())
  readAt      DateTime? // When the message was read by the receiver
  isRead Boolean @default(false)

  @@index([matchId])
  @@index([senderId])
  @@index([createdAt])
}

model PasswordResetToken {
  id          Int         @id @default(autoincrement())
  userId      Int
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  token       String      @unique // hashed token to prevent exposure if DB is compromised
  expiresAt   DateTime
  createdAt   DateTime    @default(now())
  used        Boolean     @default(false)  // To mark token as used after successful reset
  @@index([token])  /// Index for faster lookups
}